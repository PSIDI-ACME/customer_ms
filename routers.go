/*
 * ACME Reviews - PSIDI
 *
 * Swagger proposed server for the Review Product infrastructure at ACME .Inc
 *
 * API version: 0.1
 * Contact: 1171071@isep.ipp.pt
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"github.com/nvellon/hal"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

var tpl []string
var met []string

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}
	router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
		path, _ := route.GetPathTemplate()
		tpl = append(tpl, path)
		mets, _ := route.GetMethods()
		met = append(met, mets[0])
		return nil
	})

	return router
}

type Root struct {
}

func (r Root) GetMap() hal.Entry {
	return hal.Entry{}
}

func Index(w http.ResponseWriter, r *http.Request) {

	for i := 1; i < len(tpl); i++ {
		log.Println(tpl[i])
	}

	root := hal.NewResource(Root{}, r.Host)
	root.AddNewLink("search", tpl[1])
	root.AddNewLink("list", tpl[2])

	links, _ := json.MarshalIndent(root, "", "  ")

	w.Write(links)
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/v1/routes",
		Index,
	},

	Route{
		"GetCustomer",
		strings.ToUpper("Get"),
		"/v1/customers/{customerId}",
		GetCustomer,
	},

	Route{
		"RegisterCustomer",
		strings.ToUpper("Post"),
		"/v1/customers",
		RegisterCustomer,
	},
	/*
		Route{
			"UpdateCustomer",
			strings.ToUpper("Patch"),
			"/v1/customers/{customerId}",
			UpdateCustomer,
		},
	*/
}
