/*
 * ACME Reviews - PSIDI
 *
 * Swagger proposed server for the Review Product infrastructure at ACME .Inc
 *
 * API version: 0.1
 * Contact: 1171071@isep.ipp.pt
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"

	"./models"
	"./services"
	_ "github.com/lib/pq"
)

func GetCustomer(w http.ResponseWriter, r *http.Request) {

	id := mux.Vars(r)["customerId"]
	n, err := strconv.Atoi(id)
	if err != nil {
		fmt.Println(id, "is not an integer.")
	}

	requestedCustomer := services.GetCustomer(n)

	respBodyBytes := new(bytes.Buffer)
	json.NewEncoder(respBodyBytes).Encode(requestedCustomer)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(respBodyBytes.Bytes())
}

func RegisterCustomer(w http.ResponseWriter, r *http.Request) {

	requestedCustomer := &models.Customer{}

	// Try to decode the request body into the struct. If there is an error,
	// respond to the client with the error message and a 400 status code.
	err := json.NewDecoder(r.Body).Decode(&requestedCustomer)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	// Do something with the Person struct...
	customer := fmt.Sprintf("Customer: %+v", requestedCustomer)
	log.Println(customer)

	id := services.PostCustomer(requestedCustomer)
	uriOfResource := "http://localhost:8080" + r.URL.String() + "/" + strconv.FormatInt(id, 10)
	w.Write([]byte(uriOfResource))

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
