/*
 * ACME Reviews - PSIDI
 *
 * Swagger proposed server for the Review Product infrastructure at ACME .Inc
 *
 * API version: 0.1
 * Contact: 1171071@isep.ipp.pt
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
	_ "github.com/lib/pq"
)

func GetCustomer(w http.ResponseWriter, r *http.Request) {

	id := mux.Vars(r)["customerId"]

	n, err := strconv.Atoi(id)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("Id is not an integer."))
		return
	}

	requestedCustomer := GetCustomerService(n)

	respBodyBytes := new(bytes.Buffer)
	json.NewEncoder(respBodyBytes).Encode(requestedCustomer)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(respBodyBytes.Bytes())
}

func RegisterCustomer(w http.ResponseWriter, r *http.Request) {

	requestedCustomer := &Customer{}

	// Try to decode the request body into the struct. If there is an error,
	// respond to the client with the error message and a 400 status code.
	err := json.NewDecoder(r.Body).Decode(&requestedCustomer)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte(err.Error()))
		return
	}
	if requestedCustomer.Email == "" || requestedCustomer.FirstName == "" || requestedCustomer.LastName == "" || requestedCustomer.Username == "" || requestedCustomer.Password == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("Campo Vazio"))
		return
	}

	// Do something with the Person struct...
	customer := fmt.Sprintf("Customer: %+v", requestedCustomer)
	log.Println(customer)

	id, code, err := PostCustomer(requestedCustomer)
	if err != nil {
		w.WriteHeader(code)
		w.Write([]byte(err.Error()))
		return
	}
	uriOfResource := "http://psidi-acme-reviews.herokuapp.com/" + r.URL.String() + "/" + strconv.FormatInt(id, 10)

	w.WriteHeader(http.StatusCreated)
	w.Write([]byte(uriOfResource))
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
}
